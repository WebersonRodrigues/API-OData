// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ODataAPI.Data;

#nullable disable

namespace ODataAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903031434_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ODataAPI.Models.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeAvaliador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Nota")
                        .HasColumnType("integer");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("ODataAPI.Models.DetalheItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("PedidoItemId")
                        .HasColumnType("integer");

                    b.Property<string>("TipoDetalhe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoItemId");

                    b.ToTable("DetalhesItem");
                });

            modelBuilder.Entity("ODataAPI.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CNPJ = "12.345.678/0001-90",
                            DataCriacao = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Endereco = "Av. Paulista, 1000",
                            Nome = "TechStore Brasil"
                        },
                        new
                        {
                            Id = 2,
                            CNPJ = "98.765.432/0001-10",
                            DataCriacao = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Endereco = "Rua das Flores, 500",
                            Nome = "MegaShop Ltda"
                        });
                });

            modelBuilder.Entity("ODataAPI.Models.Loja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Lojas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAbertura = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmpresaId = 1,
                            Endereco = "Shopping Ibirapuera",
                            Nome = "TechStore SP",
                            Telefone = "(11) 1234-5678"
                        },
                        new
                        {
                            Id = 2,
                            DataAbertura = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmpresaId = 1,
                            Endereco = "Shopping Leblon",
                            Nome = "TechStore RJ",
                            Telefone = "(21) 8765-4321"
                        },
                        new
                        {
                            Id = 3,
                            DataAbertura = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmpresaId = 2,
                            Endereco = "Rua XV de Novembro, 200",
                            Nome = "MegaShop Centro",
                            Telefone = "(11) 5555-1234"
                        });
                });

            modelBuilder.Entity("ODataAPI.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataPedido = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailCliente = "joao@email.com",
                            NomeCliente = "João Silva",
                            Status = "Entregue",
                            ValorTotal = 1599.98m
                        },
                        new
                        {
                            Id = 2,
                            DataPedido = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailCliente = "maria@email.com",
                            NomeCliente = "Maria Santos",
                            Status = "Enviado",
                            ValorTotal = 3499.99m
                        });
                });

            modelBuilder.Entity("ODataAPI.Models.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoItens");
                });

            modelBuilder.Entity("ODataAPI.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("LojaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Eletrônicos",
                            DataCadastro = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Smartphone Android com 128GB",
                            LojaId = 1,
                            Nome = "Smartphone Galaxy",
                            Preco = 1299.99m,
                            QuantidadeEstoque = 50
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Informática",
                            DataCadastro = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Notebook i7 16GB RAM 512GB SSD",
                            LojaId = 1,
                            Nome = "Notebook Dell",
                            Preco = 3499.99m,
                            QuantidadeEstoque = 25
                        },
                        new
                        {
                            Id = 3,
                            Categoria = "Acessórios",
                            DataCadastro = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Fone sem fio com cancelamento de ruído",
                            LojaId = 2,
                            Nome = "Fone Bluetooth",
                            Preco = 299.99m,
                            QuantidadeEstoque = 100
                        });
                });

            modelBuilder.Entity("ODataAPI.Models.RespostaAvaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("integer");

                    b.Property<string>("CargoResponsavel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DataResposta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeResponsavel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.ToTable("RespostasAvaliacao");
                });

            modelBuilder.Entity("ODataAPI.Models.Avaliacao", b =>
                {
                    b.HasOne("ODataAPI.Models.Pedido", "Pedido")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ODataAPI.Models.Produto", "Produto")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("ODataAPI.Models.DetalheItem", b =>
                {
                    b.HasOne("ODataAPI.Models.PedidoItem", "PedidoItem")
                        .WithMany("DetalhesItem")
                        .HasForeignKey("PedidoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PedidoItem");
                });

            modelBuilder.Entity("ODataAPI.Models.Loja", b =>
                {
                    b.HasOne("ODataAPI.Models.Empresa", "Empresa")
                        .WithMany("Lojas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ODataAPI.Models.PedidoItem", b =>
                {
                    b.HasOne("ODataAPI.Models.Pedido", "Pedido")
                        .WithMany("PedidoItens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODataAPI.Models.Produto", "Produto")
                        .WithMany("PedidoItens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("ODataAPI.Models.Produto", b =>
                {
                    b.HasOne("ODataAPI.Models.Loja", "Loja")
                        .WithMany("Produtos")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("ODataAPI.Models.RespostaAvaliacao", b =>
                {
                    b.HasOne("ODataAPI.Models.Avaliacao", "Avaliacao")
                        .WithMany("Respostas")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("ODataAPI.Models.Avaliacao", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("ODataAPI.Models.Empresa", b =>
                {
                    b.Navigation("Lojas");
                });

            modelBuilder.Entity("ODataAPI.Models.Loja", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("ODataAPI.Models.Pedido", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("ODataAPI.Models.PedidoItem", b =>
                {
                    b.Navigation("DetalhesItem");
                });

            modelBuilder.Entity("ODataAPI.Models.Produto", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("PedidoItens");
                });
#pragma warning restore 612, 618
        }
    }
}
